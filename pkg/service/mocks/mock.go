// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBooks is a mock of Books interface.
type MockBooks struct {
	ctrl     *gomock.Controller
	recorder *MockBooksMockRecorder
}

// MockBooksMockRecorder is the mock recorder for MockBooks.
type MockBooksMockRecorder struct {
	mock *MockBooks
}

// NewMockBooks creates a new mock instance.
func NewMockBooks(ctrl *gomock.Controller) *MockBooks {
	mock := &MockBooks{ctrl: ctrl}
	mock.recorder = &MockBooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooks) EXPECT() *MockBooksMockRecorder {
	return m.recorder
}

// GetBooksByAuthor mocks base method.
func (m *MockBooks) GetBooksByAuthor(authorName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByAuthor", authorName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByAuthor indicates an expected call of GetBooksByAuthor.
func (mr *MockBooksMockRecorder) GetBooksByAuthor(authorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByAuthor", reflect.TypeOf((*MockBooks)(nil).GetBooksByAuthor), authorName)
}

// MockAuthors is a mock of Authors interface.
type MockAuthors struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorsMockRecorder
}

// MockAuthorsMockRecorder is the mock recorder for MockAuthors.
type MockAuthorsMockRecorder struct {
	mock *MockAuthors
}

// NewMockAuthors creates a new mock instance.
func NewMockAuthors(ctrl *gomock.Controller) *MockAuthors {
	mock := &MockAuthors{ctrl: ctrl}
	mock.recorder = &MockAuthorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthors) EXPECT() *MockAuthorsMockRecorder {
	return m.recorder
}

// GetAuthorsOfBook mocks base method.
func (m *MockAuthors) GetAuthorsOfBook(bookName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorsOfBook", bookName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorsOfBook indicates an expected call of GetAuthorsOfBook.
func (mr *MockAuthorsMockRecorder) GetAuthorsOfBook(bookName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorsOfBook", reflect.TypeOf((*MockAuthors)(nil).GetAuthorsOfBook), bookName)
}
